{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Info Retrieval.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyP8eeK+8ohwcB/grBjlQZyz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/YongWei12/InformationRetrival/blob/master/Q4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tDgIuYDeHWTJ",
        "outputId": "57de07e0-2cc9-44be-cd2c-ac5d83fa5869"
      },
      "source": [
        "!wget https://raw.githubusercontent.com/YongWei12/InformationRetrival/master/classification/labelled_data.csv"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "--2021-03-27 17:53:11--  https://raw.githubusercontent.com/YongWei12/InformationRetrival/master/classification/labelled_data.csv\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 544845 (532K) [text/plain]\n",
            "Saving to: ‘labelled_data.csv.11’\n",
            "\n",
            "labelled_data.csv.1 100%[===================>] 532.08K  --.-KB/s    in 0.03s   \n",
            "\n",
            "2021-03-27 17:53:11 (15.8 MB/s) - ‘labelled_data.csv.11’ saved [544845/544845]\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RZddCQTIHZMU",
        "outputId": "06144cd8-18b7-4180-ecd8-642826aaaffe"
      },
      "source": [
        "import pandas as pd\n",
        "data = pd.read_csv(\"labelled_data.csv\", error_bad_lines=False)[[\"tweet\", \"polarity\"]]\n",
        "print(data.shape)\n",
        "print(data.polarity.value_counts())"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(942, 2)\n",
            "neutral     493\n",
            "negative    249\n",
            "positive    200\n",
            "Name: polarity, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GA8zq1iSO2ZD",
        "outputId": "0f69972d-e86b-464c-fb90-95670ed3e943"
      },
      "source": [
        "import numpy as np\n",
        "import sklearn\n",
        "import spacy\n",
        "from spacytextblob.spacytextblob import SpacyTextBlob\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import time\n",
        "\n",
        "# Approach 1: using spacy\n",
        "nlp = spacy.load('en_core_web_sm')\n",
        "spacy_text_blob = SpacyTextBlob()\n",
        "nlp.add_pipe(spacy_text_blob)\n",
        "def calculate(s):\n",
        "    x = nlp(s['tweet'])\n",
        "    return x._.sentiment.polarity, x._.sentiment.subjectivity\n",
        "start = time.time()\n",
        "data[['polarity_score', 'subjectivity_score']] = data.apply(calculate, axis = 1, result_type = 'expand')\n",
        "end = time.time()\n",
        "time_taken = end - start\n",
        "# Results\n",
        "# precision (weighted): 58.16%\n",
        "# recall (weighted): 54.99%\n",
        "# f1 (weighted): 54.4%\n",
        "# time taken: 13.21sec\n",
        "# time to process each tweet: 0.01402sec\n",
        "\n",
        "# Approach 2: using textblob\n",
        "# from textblob import TextBlob\n",
        "# start = time.time()\n",
        "# def calculate(s):\n",
        "#     x = TextBlob(s['tweet'])\n",
        "#     return x.polarity, x.subjectivity\n",
        "# data[['polarity_score', 'subjectivity_score']] = data.apply(calculate, axis = 1, result_type = 'expand')\n",
        "# end = time.time()\n",
        "# time_taken = end - start\n",
        "# Results\n",
        "# precision (weighted): 58.16%\n",
        "# recall (weighted): 54.99%\n",
        "# f1 (weighted): 54.4%\n",
        "# time taken: 0.78sec\n",
        "# time to process each tweet: 0.0008sec"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/spacy/util.py:275: UserWarning: [W031] Model 'en_core_web_sm' (2.2.5) requires spaCy v2.2 and is incompatible with the current spaCy version (2.3.5). This may lead to unexpected results or runtime errors. To resolve this, download a newer compatible model or retrain your custom model with the current spaCy version. For more details and available updates, run: python -m spacy validate\n",
            "  warnings.warn(warn_msg)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XsxTLvU3uhnc",
        "outputId": "1a0a9e63-185c-463b-e5ad-09e1f9452f8e"
      },
      "source": [
        "# If < subjectivity_threshold, mark as neutral\n",
        "# If >= subjectivity_threshold, then we consider if it is positive or negative\n",
        "subjectivity_threshold = 0.44\n",
        "\n",
        "conditions = [\n",
        "    (data['subjectivity_score'] < subjectivity_threshold),\n",
        "    (data['subjectivity_score'] >= subjectivity_threshold) & (data['polarity_score'] > 0),\n",
        "    (data['subjectivity_score'] >= subjectivity_threshold) & (data['polarity_score'] < 0),\n",
        "    (data['subjectivity_score'] >= subjectivity_threshold) & (data['polarity_score'] == 0)\n",
        "    ]\n",
        "\n",
        "choices = ['neutral', 'positive', 'negative', 'neutral']\n",
        "\n",
        "data['predicted_polarity'] = np.select(conditions, choices)\n",
        "\n",
        "#data.drop(columns = [\"polarity_score\", \"subjectivity_score\"], inplace = True)\n",
        "\n",
        "# Provide evaluation metrics such as precision, recall, and F-measure and discuss results\n",
        "# Discuss performance metrics, e.g., records classified per second, and scalability of the system\n",
        "\n",
        "# because we have \"neutral\", \"positive\" and \"negative\", so we cannot use \"binary\" for average\n",
        "weighted_precision = sklearn.metrics.precision_score(y_true = data[\"polarity\"], y_pred = data[\"predicted_polarity\"], average = \"weighted\")\n",
        "weighted_recall = sklearn.metrics.recall_score(y_true = data[\"polarity\"], y_pred = data[\"predicted_polarity\"], average = \"weighted\")\n",
        "weighted_f1 = sklearn.metrics.f1_score(y_true = data[\"polarity\"], y_pred = data[\"predicted_polarity\"], average = \"weighted\")\n",
        "\n",
        "print(\"precision (weighted): {}%\".format(round(weighted_precision * 100, 2)))\n",
        "print(\"recall (weighted): {}%\".format(round(weighted_recall * 100, 2)))\n",
        "print(\"f1 (weighted): {}%\".format(round(weighted_f1 * 100, 2)))\n",
        "print(\"time taken: {}sec\".format(round(time_taken, 2)))\n",
        "print(\"time to process each tweet: {}sec\".format(round(time_taken / data.shape[0], 5)))"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "precision (weighted): 58.16%\n",
            "recall (weighted): 54.99%\n",
            "f1 (weighted): 54.4%\n",
            "time taken: 13.23sec\n",
            "time to process each tweet: 0.01404sec\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "R6KTKsz7SSH6",
        "outputId": "ff7a86a6-6a73-455d-a6a7-1bf86471a2b5"
      },
      "source": [
        "# graph = sns.displot(data[data['polarity'] == 'neutral'][\"subjectivity_score\"].tolist())\n",
        "# graph.fig.suptitle(\"Neutral tweet's subjectivity score\")\n",
        "\n",
        "# graph = sns.displot(data[data['polarity'] == 'positive'][\"subjectivity_score\"].tolist())\n",
        "# graph.fig.suptitle(\"Positive tweet's subjectivity score\")\n",
        "\n",
        "# graph = sns.displot(data[data['polarity'] == 'negative'][\"subjectivity_score\"].tolist())\n",
        "# graph.fig.suptitle(\"Negative tweet's subjectivity score\")\n",
        "\n",
        "sns.kdeplot(data[data['polarity'] == 'neutral'][\"subjectivity_score\"].tolist(), label = \"Neutral\")\n",
        "sns.kdeplot(data[data['polarity'] == 'positive'][\"subjectivity_score\"].tolist(), label = \"Positive\")\n",
        "sns.kdeplot(data[data['polarity'] == 'negative'][\"subjectivity_score\"].tolist(), label = \"Negative\")\n",
        "\n",
        "plt.legend()\n",
        "plt.title(\"Distribution of subjectivity scores across different classes\")\n",
        "plt.show()"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sRn9srWwz_Ya"
      },
      "source": [
        "# Textblob is able to achieve the same accuracy metrics as spacy\n",
        "# but at 16.94x of the speed"
      ],
      "execution_count": 42,
      "outputs": []
    }
  ]
}